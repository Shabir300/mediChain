/**
 * @fileoverview Firestore Security Rules for the Medico application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model. Users can only read and
 * write data that they explicitly own, or that is explicitly public. This
 * minimizes the risk of unauthorized data access or modification. These rules
 * are designed to prioritize security while allowing flexibility in data
 * shapes to facilitate rapid prototyping. Data validation is relaxed,
 * focusing instead on authorization and relational integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores basic user profiles. Only the authenticated user can
 *   access their own profile.
 * - /doctors/{doctorId}: Stores doctor profiles.  Write access is restricted to
 *   the matching doctor ID.
 * - /pharmacies/{pharmacyId}/products/{productId}: Stores products for each
 *   pharmacy. Write access is restricted to the matching pharmacy ID.
 * - /patients/{patientId}/appointments/{appointmentId}: Stores appointments for
 *   each patient. Write access is restricted to the matching patient ID.
 * - /patients/{patientId}/orders/{orderId}: Stores orders for each patient.
 *   Write access is restricted to the matching patient ID.
 * - /patients/{patientId}/records/{recordId}: Stores medical records for each
 *   patient. Write access is restricted to the matching patient ID.
 * - /patients/{patientId}/medications/{medicationId}: Stores medication reminders
 *   for each patient. Write access is restricted to the matching patient ID.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations require authentication.
 * - Data validation is relaxed to allow for rapid prototyping, with a focus on
 *   ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of the existing resource.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to a user's profile data only to the user themselves.
     * @path /users/{userId}
     * @allow (read, write) if the request is made by the user with matching userId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to a doctor's profile data only to the doctor themselves.
     * @path /doctors/{doctorId}
     * @allow (read, write) if the request is made by the doctor with matching doctorId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /doctors/{doctorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to a pharmacy's products only to the pharmacy themselves.
     * @path /pharmacies/{pharmacyId}/products/{productId}
     * @allow (read, write) if the request is made by the pharmacy with matching pharmacyId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /pharmacies/{pharmacyId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to a patient's appointments only to the patient themselves.
     * @path /patients/{patientId}/appointments/{appointmentId}
     * @allow (read, write) if the request is made by the patient with matching patientId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /patients/{patientId}/appointments/{appointmentId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Grants access to a patient's orders only to the patient themselves.
     * @path /patients/{patientId}/orders/{orderId}
     * @allow (read, write) if the request is made by the patient with matching patientId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /patients/{patientId}/orders/{orderId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Grants access to a patient's medical records only to the patient themselves.
     * @path /patients/{patientId}/records/{recordId}
     * @allow (read, write) if the request is made by the patient with matching patientId.
     * @deny (read, write) if the request is made by a different user or unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /patients/{patientId}/records/{recordId} {
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

     /**
      * @description Grants access to a patient's medication reminders only to the patient themselves.
      * @path /patients/{patientId}/medications/{medicationId}
      * @allow (read, write) if the request is made by the patient with matching patientId.
      * @deny (read, write) if the request is made by a different user or unauthenticated user.
      * @principle Enforces document ownership for all operations.
      */
    match /patients/{patientId}/medications/{medicationId} {
        allow get: if isOwner(patientId);
        allow list: if isOwner(patientId);
        allow create: if isSignedIn();
        allow update: if isExistingOwner(patientId);
        allow delete: if isExistingOwner(patientId);
    }
  }
}