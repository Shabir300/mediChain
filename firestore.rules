/**
 * @fileoverview Firestore Security Rules for the medical application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with doctors being able to create their profiles.
 * Users can only access their own data, while doctors can update their profiles.
 * Data shapes are not strictly validated to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores basic user information. Accessible only by the user.
 * - /doctors/{doctorId}: Stores doctor profiles. Doctors can create and update their profiles.
 * - /pharmacies/{pharmacyId}/products/{productId}: Stores products for a specific pharmacy. Accessible only by the pharmacy.
 * - /patients/{patientId}/appointments/{appointmentId}: Stores appointments for a specific patient. Accessible only by the patient.
 * - /patients/{patientId}/orders/{orderId}: Stores orders for a specific patient. Accessible only by the patient.
 * - /patients/{patientId}/records/{recordId}: Stores medical records for a specific patient. Accessible only by the patient.
 * - /patients/{patientId}/medications/{medicationId}: Stores medication reminders for a specific patient. Accessible only by the patient.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Doctor's profile can be created by any authenticated user and updated only by the doctor.
 * - Data validation is minimized to focus on authorization.
 * - No public read access is granted.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the requested userId matches their own ID.
     * @deny (read, write) if the user is not signed in or the userId does not match their own ID.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) any signed-in user can create a doctor profile.
     * @allow (update) only the doctor can update their own profile.
     * @deny (read, write) if the user is not signed in or not the doctor.
     * @principle Doctors can create and update their own profiles.
     */
    match /doctors/{doctorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(doctorId) && resource.data.uid == doctorId;
      allow delete: if false;
    }

    /**
     * @description Controls access to pharmacy products.
     * @path /pharmacies/{pharmacyId}/products/{productId}
     * @allow (read, write) if the user is signed in and the pharmacyId matches the product's pharmacyId.
     * @deny (read, write) if the user is not signed in or the pharmacyId does not match the product's pharmacyId.
     * @principle Enforces pharmacy ownership of products.
     */
    match /pharmacies/{pharmacyId}/products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.pharmacyId == pharmacyId;
      allow update: if isSignedIn() && resource.data.pharmacyId == pharmacyId;
      allow delete: if isSignedIn() && resource.data.pharmacyId == pharmacyId;
    }

    /**
     * @description Controls access to patient appointments.
     * @path /patients/{patientId}/appointments/{appointmentId}
     * @allow (read, write) if the user is signed in and the patientId matches the appointment's patientId.
     * @deny (read, write) if the user is not signed in or the patientId does not match the appointment's patientId.
     * @principle Enforces patient ownership of appointments.
     */
    match /patients/{patientId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && resource.data.patientId == patientId;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to patient orders.
     * @path /patients/{patientId}/orders/{orderId}
     * @allow (read, write) if the user is signed in and the patientId matches the order's patientId.
     * @deny (read, write) if the user is not signed in or the patientId does not match the order's patientId.
     * @principle Enforces patient ownership of orders.
     */
    match /patients/{patientId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && resource.data.patientId == patientId;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to patient medical records.
     * @path /patients/{patientId}/records/{recordId}
     * @allow (read, write) if the user is signed in and the patientId matches the record's patientId.
     * @deny (read, write) if the user is not signed in or the patientId does not match the record's patientId.
     * @principle Enforces patient ownership of medical records.
     */
    match /patients/{patientId}/records/{recordId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && resource.data.patientId == patientId;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to patient medication reminders.
     * @path /patients/{patientId}/medications/{medicationId}
     * @allow (read, write) if the user is signed in and the patientId matches the medication reminder's patientId.
     * @deny (read, write) if the user is not signed in or the patientId does not match the medication reminder's patientId.
     * @principle Enforces patient ownership of medication reminders.
     */
    match /patients/{patientId}/medications/{medicationId} {
      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId) && request.resource.data.patientId == patientId;
      allow update: if isSignedIn() && isExistingOwner(patientId) && resource.data.patientId == patientId;
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}