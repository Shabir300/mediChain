rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own profile document.
     * @allow (get, update, delete) User with uid 'user123' can read, update, and delete their own profile document.
     * @deny (create, update, delete) User with uid 'user456' cannot create, update, or delete the profile document of user with id 'user123'.
     * @principle Enforces user-ownership; users can only manage their own profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to doctor profile information.
     * @path /doctors/{doctorId}
     * @allow (get, list) Any user can read the doctor's profile.
     * @allow (create, update, delete) A doctor can create, update, and delete their own profile.
     * @deny (create, update, delete) A non-doctor user cannot create, update, or delete a doctor's profile.
     * @principle Allows public read access to doctor profiles while enforcing ownership for writes.
     */
    match /doctors/{doctorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(doctorId) {
        return request.auth.uid == doctorId;
      }

      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(doctorId);
      allow update: if isSignedIn() && isExistingOwner(doctorId);
      allow delete: if isSignedIn() && isExistingOwner(doctorId);
    }

     /**
      * @description Controls access to pharmacy products.
      * @path /pharmacies/{pharmacyId}/products/{productId}
      * @allow (get, list) Any user can read the product.
      * @allow (create, update, delete) A pharmacy can manage its own products.
      * @deny (create, update, delete) A different pharmacy or user cannot manage this pharmacy's products.
      * @principle Allows public read access to products while enforcing pharmacy-ownership for writes.
      */
    match /pharmacies/{pharmacyId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPharmacyOwner(pharmacyId) {
        return request.auth.uid == pharmacyId;
      }

      function isExistingPharmacyOwner(pharmacyId) {
        return isPharmacyOwner(pharmacyId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isPharmacyOwner(pharmacyId);
      allow update: if isSignedIn() && isExistingPharmacyOwner(pharmacyId);
      allow delete: if isSignedIn() && isExistingPharmacyOwner(pharmacyId);
    }

    /**
     * @description Controls access to patient appointments.
     * @path /patients/{patientId}/appointments/{appointmentId}
     * @allow (get, list) A patient can read their own appointments.
     * @allow (create, update, delete) A patient can create, update, and delete their own appointments.
     * @deny (create, update, delete) Another patient cannot manage these appointments.
     * @principle Enforces patient-ownership; patients can only manage their own appointments.
     */
    match /patients/{patientId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(patientId) {
        return request.auth.uid == patientId;
      }

      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to patient orders.
     * @path /patients/{patientId}/orders/{orderId}
     * @allow (get, list) A patient can read their own orders.
     * @allow (create, update, delete) A patient can create, update, and delete their own orders.
     * @deny (create, update, delete) Another patient cannot manage these orders.
     * @principle Enforces patient-ownership; patients can only manage their own orders.
     */
    match /patients/{patientId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(patientId) {
        return request.auth.uid == patientId;
      }

      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(patientId);
      allow list: if isSignedIn() && isOwner(patientId);
      allow create: if isSignedIn() && isOwner(patientId);
      allow update: if isSignedIn() && isExistingOwner(patientId);
      allow delete: if isSignedIn() && isExistingOwner(patientId);
    }
    
    /**
     * @description Controls access to patient medical records.
     * @path /patients/{patientId}/records/{recordId}
     * @allow (get, list) A patient can read their own medical records.
     * @allow (create, update, delete) A patient can create, update, and delete their own medical records.
     * @deny (create, update, delete) Another patient cannot manage these medical records.
     * @principle Enforces patient-ownership; patients can only manage their own medical records.
     */
    match /patients/{patientId}/records/{recordId} {
        function isSignedIn() {
          return request.auth != null;
        }
  
        function isOwner(patientId) {
          return request.auth.uid == patientId;
        }
  
        function isExistingOwner(patientId) {
          return isOwner(patientId) && resource.data != null;
        }
  
        allow get: if isSignedIn() && isOwner(patientId);
        allow list: if isSignedIn() && isOwner(patientId);
        allow create: if isSignedIn() && isOwner(patientId);
        allow update: if isSignedIn() && isExistingOwner(patientId);
        allow delete: if isSignedIn() && isExistingOwner(patientId);
    }

    /**
     * @description Controls access to patient medication reminders.
     * @path /patients/{patientId}/medications/{medicationId}
     * @allow (get, list) A patient can read their own medication reminders.
     * @allow (create, update, delete) A patient can create, update, and delete their own medication reminders.
     * @deny (create, update, delete) Another patient cannot manage these medication reminders.
     * @principle Enforces patient-ownership; patients can only manage their own medication reminders.
     */
    match /patients/{patientId}/medications/{medicationId} {
        function isSignedIn() {
          return request.auth != null;
        }
  
        function isOwner(patientId) {
          return request.auth.uid == patientId;
        }
  
        function isExistingOwner(patientId) {
          return isOwner(patientId) && resource.data != null;
        }
  
        allow get: if isSignedIn() && isOwner(patientId);
        allow list: if isSignedIn() && isOwner(patientId);
        allow create: if isSignedIn() && isOwner(patientId);
        allow update: if isSignedIn() && isExistingOwner(patientId);
        allow delete: if isSignedIn() && isExistingOwner(patientId);
    }
  }
}