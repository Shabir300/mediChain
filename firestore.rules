/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, where users can only
 *              access their own data and pharmacies can manage their own product listings.
 *              Doctor profiles are publicly readable but only created/updated by themselves.
 *
 * Data Structure:
 * - /users/{userId}: Stores basic user profile information; owned by the user.
 * - /doctors/{doctorId}: Stores doctor profile information; owned by the doctor.
 * - /pharmacies/{pharmacyId}/products/{productId}: Products sold by a specific pharmacy; owned by the pharmacy.
 * - /patients/{patientId}/appointments/{appointmentId}: Appointments for a patient; owned by the patient.
 * - /patients/{patientId}/orders/{orderId}: Orders placed by a patient; owned by the patient.
 * - /patients/{patientId}/records/{recordId}: Medical records for a patient; owned by the patient.
 * - /patients/{patientId}/medications/{medicationId}: Medication reminders for a patient; owned by the patient.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Doctor profiles are publicly readable, but only doctors can create/update their profiles.
 * - Pharmacies can only manage their own product listings.
 * - Patients can only manage their own appointments, orders, medical records, and medication reminders.
 * - Listing of users, appointments, orders, records, and medications is restricted to the owner.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `request.auth.uid` to match the `userId`, `doctorId`, or `pharmacyId` in the path to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure doctor profiles. Doctors can create and update their own profiles. Everyone can read doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) Doctor with UID 'doctor123' creates their profile.
     * @allow (get) Any user can read a doctor's profile.
     * @allow (update) Doctor with UID 'doctor123' updates their own profile.
     * @allow (delete) Doctor with UID 'doctor123' deletes their own profile.
     * @deny (create) User with UID 'user123' tries to create a doctor profile for 'doctor456'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /doctors/{doctorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(doctorId) {
        return isSignedIn() && request.auth.uid == doctorId;
      }
      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(doctorId);
      allow update: if isExistingOwner(doctorId);
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Secure product listings for pharmacies. Pharmacies can only manage their own products.
     * @path /pharmacies/{pharmacyId}/products/{productId}
     * @allow (create) Pharmacy with UID 'pharmacy123' creates a product.
     * @allow (get) Pharmacy with UID 'pharmacy123' or any other user can read product details.
     * @allow (update) Pharmacy with UID 'pharmacy123' updates a product.
     * @allow (delete) Pharmacy with UID 'pharmacy123' deletes a product.
     * @deny (create) Pharmacy with UID 'pharmacy123' tries to create a product for 'pharmacy456'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pharmacies/{pharmacyId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(pharmacyId) {
        return isSignedIn() && request.auth.uid == pharmacyId;
      }
      function isExistingOwner(pharmacyId) {
        return isOwner(pharmacyId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(pharmacyId);
      allow update: if isExistingOwner(pharmacyId);
      allow delete: if isExistingOwner(pharmacyId);
    }

    /**
     * @description Secure appointments for patients. Patients can only manage their own appointments.
     * @path /patients/{patientId}/appointments/{appointmentId}
     * @allow (create) Patient with UID 'patient123' creates an appointment.
     * @allow (get) Patient with UID 'patient123' can read their appointment.
     * @allow (update) Patient with UID 'patient123' updates their appointment.
     * @allow (delete) Patient with UID 'patient123' deletes their appointment.
     * @deny (create) Patient with UID 'patient123' tries to create an appointment for 'patient456'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(patientId) {
        return isSignedIn() && request.auth.uid == patientId;
      }
      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Secure orders for patients. Patients can only manage their own orders.
     * @path /patients/{patientId}/orders/{orderId}
     * @allow (create) Patient with UID 'patient123' creates an order.
     * @allow (get) Patient with UID 'patient123' can read their order.
     * @allow (update) Patient with UID 'patient123' updates their order.
     * @allow (delete) Patient with UID 'patient123' deletes their order.
     * @deny (create) Patient with UID 'patient123' tries to create an order for 'patient456'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(patientId) {
        return isSignedIn() && request.auth.uid == patientId;
      }
      function isExistingOwner(patientId) {
        return isOwner(patientId) && resource != null;
      }
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }

    /**
     * @description Secure medical records for patients. Patients can only manage their own medical records.
     * @path /patients/{patientId}/records/{recordId}
     * @allow (create) Patient with UID 'patient123' creates a medical record.
     * @allow (get) Patient with UID 'patient123' can read their medical record.
     * @allow (update) Patient with UID 'patient123' updates their medical record.
     * @allow (delete) Patient with UID 'patient123' deletes their medical record.
     * @deny (create) Patient with UID 'patient123' tries to create a medical record for 'patient456'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/records/{recordId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(patientId) {
            return isSignedIn() && request.auth.uid == patientId;
        }
        function isExistingOwner(patientId) {
            return isOwner(patientId) && resource != null;
        }
        allow get: if isOwner(patientId);
        allow list: if isOwner(patientId);
        allow create: if isOwner(patientId);
        allow update: if isExistingOwner(patientId);
        allow delete: if isExistingOwner(patientId);
    }

     /**
      * @description Secure medication reminders for patients. Patients can only manage their own medication reminders.
      * @path /patients/{patientId}/medications/{medicationId}
      * @allow (create) Patient with UID 'patient123' creates a medication reminder.
      * @allow (get) Patient with UID 'patient123' can read their medication reminder.
      * @allow (update) Patient with UID 'patient123' updates their medication reminder.
      * @allow (delete) Patient with UID 'patient123' deletes their medication reminder.
      * @deny (create) Patient with UID 'patient123' tries to create a medication reminder for 'patient456'.
      * @principle Enforces document ownership for writes.
      */
    match /patients/{patientId}/medications/{medicationId} {
      function isSignedIn() {
          return request.auth != null;
      }
      function isOwner(patientId) {
          return isSignedIn() && request.auth.uid == patientId;
      }
      function isExistingOwner(patientId) {
          return isOwner(patientId) && resource != null;
      }
      allow get: if isOwner(patientId);
      allow list: if isOwner(patientId);
      allow create: if isOwner(patientId);
      allow update: if isExistingOwner(patientId);
      allow delete: if isExistingOwner(patientId);
    }
  }
}