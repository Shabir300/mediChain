/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for most data, with public read access where appropriate.
 * It prioritizes strong authorization and omits data validation to allow for rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores basic user information.  Only the user can read/write their own document.
 * - `/doctors/{doctorId}`: Stores doctor profiles. Public read, owner write.
 * - `/pharmacies/{pharmacyId}/products/{productId}`: Stores pharmacy products. Public read, owner write.
 * - `/patients/{patientId}/appointments/{appointmentId}`: Stores patient appointments. Only the patient can read/write their own appointments.
 * - `/patients/{patientId}/orders/{orderId}`: Stores patient orders. Only the patient can read/write their own orders.
 * - `/patients/{patientId}/records/{recordId}`: Stores patient medical records. Only the patient can read/write their own records.
 * - `/patients/{patientId}/medications/{medicationId}`: Stores patient medication reminders. Only the patient can read/write their own medications.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - All write operations are checked against user authentication.
 * - In prototyping mode, data validation is skipped to allow for schema flexibility.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `request.auth.uid` for identity verification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @deny (create) User with uid 'user456' cannot create a profile with userId 'user123'.
     * @allow (get) User with uid 'user123' can read their own profile.
     * @deny (get) User with uid 'user456' cannot read user profile with userId 'user123'.
     * @allow (update) User with uid 'user123' can update their own profile.
     * @deny (update) User with uid 'user456' cannot update user profile with userId 'user123'.
     * @allow (delete) User with uid 'user123' can delete their own profile.
     * @deny (delete) User with uid 'user456' cannot delete user profile with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to doctor profiles.
     * @path /doctors/{doctorId}
     * @allow (create) Doctor with uid 'doctor123' can create their profile.
     * @deny (create) User with uid 'user456' cannot create a doctor profile with doctorId 'doctor123'.
     * @allow (get) Any user can read a doctor's profile.
     * @deny (get) N/A
     * @allow (update) Doctor with uid 'doctor123' can update their own profile.
     * @deny (update) User with uid 'user456' cannot update doctor profile with doctorId 'doctor123'.
     * @allow (delete) Doctor with uid 'doctor123' can delete their own profile.
     * @deny (delete) User with uid 'user456' cannot delete doctor profile with doctorId 'doctor123'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /doctors/{doctorId} {
      allow get: if true;
      allow list: if false;
      allow create: if request.auth.uid == doctorId;
      allow update: if isOwner(doctorId);
      allow delete: if isOwner(doctorId);
    }

    /**
     * @description Controls access to product information for a specific pharmacy.
     * @path /pharmacies/{pharmacyId}/products/{productId}
     * @allow (create) Pharmacy with pharmacyId 'pharmacy123' can create a product.
     * @deny (create) User with uid 'user456' cannot create a product for pharmacy 'pharmacy123'.
     * @allow (get) Any user can read a product.
     * @deny (get) N/A
     * @allow (update) Pharmacy with pharmacyId 'pharmacy123' can update a product.
     * @deny (update) User with uid 'user456' cannot update product with productId 'product123' for pharmacy 'pharmacy123'.
     * @allow (delete) Pharmacy with pharmacyId 'pharmacy123' can delete a product.
     * @deny (delete) User with uid 'user456' cannot delete product with productId 'product123' for pharmacy 'pharmacy123'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /pharmacies/{pharmacyId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == pharmacyId;
      allow update: if isOwner(pharmacyId);
      allow delete: if isOwner(pharmacyId);
    }

    /**
     * @description Controls access to appointments for a specific patient.
     * @path /patients/{patientId}/appointments/{appointmentId}
     * @allow (create) Patient with patientId 'patient123' can create an appointment.
     * @deny (create) User with uid 'user456' cannot create an appointment for patient 'patient123'.
     * @allow (get) Patient with patientId 'patient123' can read their own appointment.
     * @deny (get) User with uid 'user456' cannot read appointment with appointmentId 'appt123' for patient 'patient123'.
     * @allow (update) Patient with patientId 'patient123' can update their own appointment.
     * @deny (update) User with uid 'user456' cannot update appointment with appointmentId 'appt123' for patient 'patient123'.
     * @allow (delete) Patient with patientId 'patient123' can delete their own appointment.
     * @deny (delete) User with uid 'user456' cannot delete appointment with appointmentId 'appt123' for patient 'patient123'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/appointments/{appointmentId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if request.auth.uid == patientId;
      allow update: if isOwner(patientId);
      allow delete: if isOwner(patientId);
    }

    /**
     * @description Controls access to orders for a specific patient.
     * @path /patients/{patientId}/orders/{orderId}
     * @allow (create) Patient with patientId 'patient123' can create an order.
     * @deny (create) User with uid 'user456' cannot create an order for patient 'patient123'.
     * @allow (get) Patient with patientId 'patient123' can read their own order.
     * @deny (get) User with uid 'user456' cannot read order with orderId 'order123' for patient 'patient123'.
     * @allow (update) Patient with patientId 'patient123' can update their own order.
     * @deny (update) User with uid 'user456' cannot update order with orderId 'order123' for patient 'patient123'.
     * @allow (delete) Patient with patientId 'patient123' can delete their own order.
     * @deny (delete) User with uid 'user456' cannot delete order with orderId 'order123' for patient 'patient123'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/orders/{orderId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if request.auth.uid == patientId;
      allow update: if isOwner(patientId);
      allow delete: if isOwner(patientId);
    }

    /**
     * @description Controls access to medical records for a specific patient.
     * @path /patients/{patientId}/records/{recordId}
     * @allow (create) Patient with patientId 'patient123' can create a medical record.
     * @deny (create) User with uid 'user456' cannot create a medical record for patient 'patient123'.
     * @allow (get) Patient with patientId 'patient123' can read their own medical record.
     * @deny (get) User with uid 'user456' cannot read medical record with recordId 'record123' for patient 'patient123'.
     * @allow (update) Patient with patientId 'patient123' can update their own medical record.
     * @deny (update) User with uid 'user456' cannot update medical record with recordId 'record123' for patient 'patient123'.
     * @allow (delete) Patient with patientId 'patient123' can delete their own medical record.
     * @deny (delete) User with uid 'user456' cannot delete medical record with recordId 'record123' for patient 'patient123'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/records/{recordId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if request.auth.uid == patientId;
      allow update: if isOwner(patientId);
      allow delete: if isOwner(patientId);
    }

       /**
     * @description Controls access to medication reminders for a specific patient.
     * @path /patients/{patientId}/medications/{medicationId}
     * @allow (create) Patient with patientId 'patient123' can create a medication reminder.
     * @deny (create) User with uid 'user456' cannot create a medication reminder for patient 'patient123'.
     * @allow (get) Patient with patientId 'patient123' can read their own medication reminder.
     * @deny (get) User with uid 'user456' cannot read medication reminder with medicationId 'med123' for patient 'patient123'.
     * @allow (update) Patient with patientId 'patient123' can update their own medication reminder.
     * @deny (update) User with uid 'user456' cannot update medication reminder with medicationId 'med123' for patient 'patient123'.
     * @allow (delete) Patient with patientId 'patient123' can delete their own medication reminder.
     * @deny (delete) User with uid 'user456' cannot delete medication reminder with medicationId 'med123' for patient 'patient123'.
     * @principle Enforces document ownership for writes.
     */
    match /patients/{patientId}/medications/{medicationId} {
      allow get: if isOwner(patientId);
      allow list: if false;
      allow create: if request.auth.uid == patientId;
      allow update: if isOwner(patientId);
      allow delete: if isOwner(patientId);
    }
  }

  // Helper function to determine if the current user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to check if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}